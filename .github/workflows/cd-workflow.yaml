name: CD-Workflow

on:
  workflow_call:
    inputs:
      CLUSTER_NAME:
        required: true
        type: string
      RESOURCE_GROUP:
        required: true
        type: string
      NAMESPACE:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      VALUES_FILE:
        required: true
        type: string
    
    secrets:
      ACR_URL:
        required: true
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout service repository"
      uses: actions/checkout@v3
      with:
        path: main

    - name: "Checkout central-helm-chart repository"
      uses: actions/checkout@v3
      with:
        repository: mehmetca-tr/central-helm-chart
        path: central-helm-chart

    - name: "Set the target AKS cluster"
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ inputs.CLUSTER_NAME }}
        resource-group: ${{ inputs.RESOURCE_GROUP }}
    
    - name: Copy from central helm templates to service level charts folder
      run: cp -rp central-helm-chart/templates ./main/charts
      shell: bash

    - name: "Create IMAGE_NAME environment variable"
      run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      shell: bash

    ### HELM COMMANDS

    - name: Install Helm
      uses: Azure/setup-helm@v1
      with:
        version: v3.8.0

    - name: Helm Dry Run
      run: |
        helm upgrade \
            --dry-run \
            --install \
            --create-namespace \
            --namespace ${{ inputs.NAMESPACE }} \
            ${{ env.IMAGE_NAME }} \
            ./main/charts/ \
            -f ./main/charts/${{ inputs.VALUES_FILE }} \
            --set image.tag=${{ inputs.IMAGE_TAG }}

    - name: Helm Package
      run: |
        helm package \
            --app-version 3.2.1-${{ github.sha }} \
            --version 1.2.3-${{ github.sha }} \
            ./main/charts/
      
      ### Versions should be fixed

    - name: Authenticate with the registry
      run: |
        helm registry login \
            ${{ secrets.ACR_URL }} \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }}

    - name: Push chart to registry as OCI artifact
      run: |
        helm push \
        ${{ env.IMAGE_NAME }}-1.2.3-${{ github.sha }}.tgz \
        oci://${{ secrets.ACR_URL }}/helm

    - name: Install / Upgrade helm chart
      run: |
        helm upgrade \
            --install \
            --create-namespace \
            --namespace ${{ inputs.NAMESPACE }} \
            --timeout 300s \
            --wait \
            ${{ env.IMAGE_NAME }} \
            oci://${{ secrets.ACR_URL }}/helm/${{ env.IMAGE_NAME }} --version 1.2.3-${{ github.sha }} \
            -f ./main/charts/${{ inputs.VALUES_FILE }} \
            --set image.tag=${{ inputs.IMAGE_TAG }}

    # --- PreProd Tests ---
  test:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
    - name: "PreProd Test Steps"
      run: echo "---- PreProd Tests ----"

    # --- Image Promotion ---
  image-promotion:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: "PreProd Image Promotion Step"
      run: echo "---- PreProd Image Promotion ----"

    - name: "Checkout service repository"
      uses: actions/checkout@v3
      with:
        path: main

    - uses: Azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_URL }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: "Create IMAGE_NAME environment variable"
      run: echo "IMAGE_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      shell: bash
     
    - name: "Tag and push to container registry"
      run: |
        docker pull ${{ secrets.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
        docker tag ${{ secrets.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }} ${{ secrets.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}-stable
        docker push ${{ secrets.ACR_URL }}/${{ env.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}-stable
        echo "Pushed with a < STABLE > tag"

    
    ### Notes
    # dev-stable image tag should be checked before deployment
    # versioning for image and helm package should be integrated with ci part